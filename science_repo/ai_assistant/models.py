from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone

User = get_user_model()


class AIModel(models.Model):
    """
    AIModel model representing an AI model that can be used for generating comments.
    """
    name = models.CharField(max_length=100)
    version = models.CharField(max_length=50)
    provider = models.CharField(max_length=100)
    api_endpoint = models.URLField()
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.name} v{self.version}"


class AIPrompt(models.Model):
    """
    AIPrompt model representing a prompt template for AI-generated comments.
    """
    name = models.CharField(max_length=100)
    description = models.TextField()
    prompt_template = models.TextField()
    ai_model = models.ForeignKey(AIModel, on_delete=models.CASCADE, related_name='prompts')
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='created_prompts')

    def __str__(self):
        return self.name


class AICommentSuggestion(models.Model):
    """
    AICommentSuggestion model representing a comment suggestion generated by AI.
    """
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
        ('modified', 'Modified and Approved'),
    ]

    document_version = models.ForeignKey('publications.DocumentVersion', on_delete=models.CASCADE,
                                         related_name='ai_suggestions')
    ai_model = models.ForeignKey(AIModel, on_delete=models.CASCADE, related_name='suggestions')
    ai_prompt = models.ForeignKey(AIPrompt, on_delete=models.CASCADE, related_name='suggestions')
    content = models.TextField()
    section_reference = models.CharField(max_length=100, null=True, blank=True)
    line_start = models.PositiveIntegerField(null=True, blank=True)
    line_end = models.PositiveIntegerField(null=True, blank=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    created_at = models.DateTimeField(auto_now_add=True)
    reviewed_at = models.DateTimeField(null=True, blank=True)
    reviewed_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='reviewed_suggestions')

    # Das comment-Feld MIT String-Referenz - so vermeiden wir Import-Probleme
    comment = models.OneToOneField('comments.Comment', on_delete=models.SET_NULL, null=True, blank=True,
                                   related_name='ai_suggestion')

    confidence_score = models.FloatField(default=0.0)

    def __str__(self):
        return f"AI Suggestion for {self.document_version}"


class AIPromptLog(models.Model):
    """
    AIPromptLog model representing a log of AI prompt executions.
    """
    ai_model = models.ForeignKey(AIModel, on_delete=models.CASCADE, related_name='logs')
    ai_prompt = models.ForeignKey(AIPrompt, on_delete=models.CASCADE, related_name='logs')
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='ai_prompt_logs')
    input_context = models.TextField()
    output_text = models.TextField()
    execution_time = models.FloatField()  # in seconds
    token_count = models.PositiveIntegerField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Log for {self.ai_prompt} at {self.created_at}"


class AIReference(models.Model):
    """
    AIReference model representing a reference used by AI to generate a comment suggestion.
    """
    suggestion = models.ForeignKey(AICommentSuggestion, on_delete=models.CASCADE, related_name='references')
    title = models.CharField(max_length=500)
    authors = models.CharField(max_length=500)
    publication_date = models.DateField(null=True, blank=True)
    doi = models.CharField(max_length=200, null=True, blank=True)
    url = models.URLField(null=True, blank=True)
    citation_text = models.TextField()
    trust_level = models.CharField(max_length=20, choices=[
        ('high', 'High - Peer Reviewed'),
        ('medium', 'Medium - Verified Comment'),
        ('low', 'Low - External Source'),
    ])

    def __str__(self):
        return self.title


class AIFeedback(models.Model):
    """
    AIFeedback model representing feedback on AI-generated comment suggestions.
    """
    suggestion = models.ForeignKey(AICommentSuggestion, on_delete=models.CASCADE, related_name='feedback')
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='ai_feedback')
    rating = models.PositiveSmallIntegerField()  # 1-5 rating
    feedback_text = models.TextField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('suggestion', 'user')

    def __str__(self):
        return f"Feedback on {self.suggestion} by {self.user.get_full_name()}"